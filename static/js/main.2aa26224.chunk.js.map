{"version":3,"sources":["images/background.jpeg","serviceWorker.ts","styles/colors.ts","components/Sidebar.tsx","components/App.tsx","index.tsx"],"names":["module","exports","Boolean","window","location","hostname","match","colors","useStyles","makeStyles","theme","root","display","color","width","margin","backgroundColor","borderRadius","minWidth","drawer","position","height","overflow","background","backgroundPosition","backgroundRepeat","breakpoints","up","flexShrink","appBar","marginLeft","menuDivider","menuButton","marginRight","spacing","toolbar","mixins","menuHeader","fontWeight","fontSize","textTransform","cursor","drawerPaper","content","flexGrow","padding","Sidebar","children","classes","useTheme","React","useState","mobileOpen","setMobileOpen","className","style","left","top","ListItem","ListItemIcon","ListItemText","primary","Divider","List","map","text","index","button","key","CssBaseline","aria-label","Hidden","smUp","implementation","Drawer","variant","anchor","direction","open","onClose","paper","ModalProps","keepMounted","xsDown","App","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.2aa26224.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/background.a1e2e792.jpeg\";","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","export const colors = {\r\n  buttonHover: 'rgba(200, 200, 200, 0.2)',\r\n  buttonColor: '#ff9800',\r\n  buttonShadow:\r\n    '0 12px 20px -10px rgba(255, 152, 0, 0.28), 0 4px 20px 0 rgba(0, 0, 0, 0.12), 0 7px 8px -5px rgba(255, 152, 0, 0.2)',\r\n  blockShadow: '0 1px 4px 0 rgba(0, 0, 0, 0.14)',\r\n  colorBackground: '#eee',\r\n  colorYellow: 'linear-gradient(60deg, #ffa726, #fb8c00)',\r\n  colorGreen: 'linear-gradient(60deg, #66bb6a, #43a047)',\r\n  colorRed: 'linear-gradient(60deg, #ef5350, #e53935)',\r\n  colorBlue: 'linear-gradient(60deg, #26c6da, #00acc1)',\r\n};\r\n","import React, { FC } from 'react';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport Drawer from '@material-ui/core/Drawer';\r\nimport Hidden from '@material-ui/core/Hidden';\r\nimport InboxIcon from '@material-ui/icons/MoveToInbox';\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport MailIcon from '@material-ui/icons/Mail';\r\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\r\nimport background from '../images/background.jpeg';\r\nimport { colors } from '../styles/colors';\r\nimport SportsBaseballIcon from '@material-ui/icons/SportsBaseball';\r\n\r\nconst drawerWidth = 240;\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    '& ::-webkit-scrollbar': {\r\n      display: 'none',\r\n    },\r\n    display: 'flex',\r\n    '& .MuiSvgIcon-root': {\r\n      color: 'white',\r\n    },\r\n\r\n    '& .MuiListItem-button': {\r\n      color: 'white',\r\n      width: '90%',\r\n      margin: 'auto',\r\n      '&:hover': {\r\n        backgroundColor: colors.buttonHover,\r\n      },\r\n      borderRadius: 5,\r\n    },\r\n    '& .MuiListItemIcon-root': {\r\n      minWidth: 45,\r\n    },\r\n  },\r\n  drawer: {\r\n    position: 'relative',\r\n    height: '100%',\r\n    backgroundColor: 'black',\r\n    overflow: 'hidden',\r\n    background: `url(${background})`,\r\n    backgroundPosition: '60% center',\r\n    backgroundRepeat: 'no-repeat',\r\n    [theme.breakpoints.up('sm')]: {\r\n      width: drawerWidth,\r\n      flexShrink: 0,\r\n    },\r\n  },\r\n  appBar: {\r\n    [theme.breakpoints.up('sm')]: {\r\n      width: `calc(100% - ${drawerWidth}px)`,\r\n      marginLeft: drawerWidth,\r\n    },\r\n  },\r\n  menuDivider: {\r\n    width: '90%',\r\n    margin: 'auto',\r\n  },\r\n  menuButton: {\r\n    marginRight: theme.spacing(2),\r\n    [theme.breakpoints.up('sm')]: {\r\n      display: 'none',\r\n    },\r\n  },\r\n  // necessary for content to be below app bar\r\n  toolbar: theme.mixins.toolbar,\r\n  menuHeader: {\r\n    color: 'white',\r\n    fontWeight: 400,\r\n    margin: '10px 12px !important',\r\n    fontSize: 18,\r\n    textTransform: 'uppercase',\r\n    '&:hover': {\r\n      cursor: 'default !important',\r\n      backgroundColor: 'transparent !important',\r\n    },\r\n  },\r\n  drawerPaper: {\r\n    width: drawerWidth,\r\n  },\r\n  content: {\r\n    flexGrow: 1,\r\n    padding: theme.spacing(3),\r\n  },\r\n}));\r\n\r\nconst Sidebar: FC<{ children?: React.ReactNode }> = ({ children }) => {\r\n  const classes = useStyles();\r\n  const theme = useTheme();\r\n  const [mobileOpen, setMobileOpen] = React.useState(false);\r\n\r\n  const handleDrawerToggle = () => {\r\n    setMobileOpen(!mobileOpen);\r\n  };\r\n\r\n  const drawer = (\r\n    <div className={classes.drawer}>\r\n      <div\r\n        style={{\r\n          backgroundColor: 'rgba(0, 0, 0, 0.5)',\r\n          width: '100%',\r\n          height: '100%',\r\n          position: 'absolute',\r\n          left: 0,\r\n          top: 0,\r\n        }}\r\n      >\r\n        {' '}\r\n      </div>\r\n      <ListItem className={classes.menuHeader}>\r\n        <ListItemIcon>\r\n          <SportsBaseballIcon />\r\n        </ListItemIcon>\r\n        <ListItemText primary={'tennis stats'} />\r\n      </ListItem>\r\n      <Divider className={classes.menuDivider} />\r\n      <List>\r\n        {['Inbox', 'Starred', 'Send email', 'Drafts'].map((text, index) => (\r\n          <ListItem button key={text}>\r\n            <ListItemIcon>\r\n              {index % 2 === 0 ? <InboxIcon /> : <MailIcon />}\r\n            </ListItemIcon>\r\n            <ListItemText primary={text} />\r\n          </ListItem>\r\n        ))}\r\n      </List>\r\n    </div>\r\n  );\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <CssBaseline />\r\n\r\n      <nav className={classes.drawer} aria-label=\"mailbox folders\">\r\n        {/* The implementation can be swapped with js to avoid SEO duplication of links. */}\r\n        <Hidden smUp implementation=\"css\">\r\n          <Drawer\r\n            variant=\"temporary\"\r\n            anchor={theme.direction === 'rtl' ? 'right' : 'left'}\r\n            open={mobileOpen}\r\n            onClose={handleDrawerToggle}\r\n            classes={{\r\n              paper: classes.drawerPaper,\r\n            }}\r\n            ModalProps={{\r\n              keepMounted: true, // Better open performance on mobile.\r\n            }}\r\n          >\r\n            {drawer}\r\n          </Drawer>\r\n        </Hidden>\r\n        <Hidden xsDown implementation=\"css\">\r\n          <Drawer\r\n            classes={{\r\n              paper: classes.drawerPaper,\r\n            }}\r\n            variant=\"permanent\"\r\n            open\r\n          >\r\n            {drawer}\r\n          </Drawer>\r\n        </Hidden>\r\n      </nav>\r\n      <main className={classes.content}>{children}</main>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Sidebar;\r\n","import React from 'react';\r\nimport Sidebar from './Sidebar';\r\n\r\nfunction App() {\r\n  return <Sidebar> </Sidebar>;\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport App from './components/App';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <CssBaseline />\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// нужно 1 выбор месяца и года 2 в зависимости от выбранного периода\r\n// подробная общая статистика а также краткая статистика профита по разным\r\n// видам ставок. т.е разные стратегии разные форматы (вта и атп) по каждой\r\n// кратко 3 график прибыли по выбранному ранее периоду 4 таблица всех\r\n// загруженных прогнозов 5 статистика по месяцам подробная как впрогнозе\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}