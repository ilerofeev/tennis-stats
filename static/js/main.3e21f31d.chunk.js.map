{"version":3,"sources":["images/background.jpeg","serviceWorker.ts","styles/colors.ts","components/Sidebar.tsx","components/AbsoluteIcon.tsx","components/InfoCard.tsx","components/App.tsx","index.tsx"],"names":["module","exports","Boolean","window","location","hostname","match","colors","useStyles","makeStyles","theme","root","display","color","width","margin","backgroundColor","borderRadius","minWidth","backgroundFilter","height","position","left","top","drawer","overflow","background","backgroundPosition","backgroundRepeat","breakpoints","up","flexShrink","appBar","marginLeft","menuDivider","menuButton","marginRight","spacing","toolbar","mixins","menuHeader","fontWeight","fontSize","textTransform","cursor","drawerPaper","content","flexGrow","padding","Sidebar","children","classes","useTheme","history","useHistory","React","useState","mobileOpen","setMobileOpen","sidebarItems","label","path","icon","className","ListItem","ListItemIcon","ListItemText","primary","Divider","List","map","item","button","key","onClick","push","CssBaseline","aria-label","Hidden","implementation","Drawer","variant","anchor","direction","open","onClose","paper","ModalProps","keepMounted","iconWrapper","float","marginTop","lineHeight","AbsoluteIcon","style","getBackgroundColor","boxShadow","getShadowColor","card","infoTitle","textAlign","infoDescription","hint","divider","InfoCard","data","title","description","marginBottom","cardsWrapper","App","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.3e21f31d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/background.a1e2e792.jpeg\";","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","export const colors = {\n  buttonHover: 'rgba(200, 200, 200, 0.2)',\n  buttonColor: '#ff9800',\n  blockShadow: '0 1px 4px 0 rgba(0, 0, 0, 0.14)',\n  shadowOrange:\n    '0 12px 20px -10px rgba(255, 152, 0, 0.28), 0 4px 20px 0 rgba(0, 0, 0, 0.12), 0 7px 8px -5px rgba(255, 152, 0, 0.2)',\n  shadowGreen:\n    '0 4px 20px 0 rgba(0, 0, 0,.14), 0 7px 10px -5px rgba(76, 175, 80,.4)',\n  shadowRed:\n    '0 4px 20px 0 rgba(0, 0, 0,.14), 0 7px 10px -5px rgba(76, 175, 80,.4)',\n  shadowBlue:\n    '0 4px 20px 0 rgba(0, 0, 0,.14), 0 7px 10px -5px rgba(76, 175, 80,.4)',\n  colorBackground: '#eee',\n  colorPrimary: '#3c4858',\n  colorSecondary: '#999',\n  linearOrange: 'linear-gradient(60deg, #ffa726, #fb8c00)',\n  linearGreen: 'linear-gradient(60deg, #66bb6a, #43a047)',\n  linearRed: 'linear-gradient(60deg, #ef5350, #e53935)',\n  linearBlue: 'linear-gradient(60deg, #26c6da, #00acc1)',\n};\n","import React, { FC } from 'react';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport Divider from '@material-ui/core/Divider';\nimport Drawer from '@material-ui/core/Drawer';\nimport Hidden from '@material-ui/core/Hidden';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport HomeIcon from '@material-ui/icons/Home';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\nimport background from '../images/background.jpeg';\nimport { colors } from '../styles/colors';\nimport SportsBaseballIcon from '@material-ui/icons/SportsBaseball';\nimport { useHistory } from 'react-router';\n\nconst drawerWidth = 240;\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    '& ::-webkit-scrollbar': {\n      display: 'none',\n    },\n    display: 'flex',\n    '& .MuiSvgIcon-root': {\n      color: 'white',\n    },\n\n    '& .MuiListItem-button': {\n      color: 'white',\n      width: '90%',\n      margin: 'auto',\n      '&:hover': {\n        backgroundColor: colors.buttonHover,\n      },\n      borderRadius: 5,\n    },\n    '& .MuiListItemIcon-root': {\n      minWidth: 45,\n    },\n  },\n  backgroundFilter: {\n    backgroundColor: 'rgba(0, 0, 0, 0.5)',\n    width: '100%',\n    height: '100%',\n    position: 'absolute',\n    left: 0,\n    top: 0,\n  },\n  drawer: {\n    position: 'relative',\n    height: '100%',\n    backgroundColor: 'black',\n    overflow: 'hidden',\n    background: `url(${background})`,\n    backgroundPosition: '60% center',\n    backgroundRepeat: 'no-repeat',\n    [theme.breakpoints.up('sm')]: {\n      width: drawerWidth,\n      flexShrink: 0,\n    },\n  },\n  appBar: {\n    [theme.breakpoints.up('sm')]: {\n      width: `calc(100% - ${drawerWidth}px)`,\n      marginLeft: drawerWidth,\n    },\n  },\n  menuDivider: {\n    width: '90%',\n    margin: 'auto',\n    backgroundColor: colors.colorSecondary,\n  },\n  menuButton: {\n    marginRight: theme.spacing(2),\n    [theme.breakpoints.up('sm')]: {\n      display: 'none',\n    },\n  },\n  // necessary for content to be below app bar\n  toolbar: theme.mixins.toolbar,\n  menuHeader: {\n    color: 'white',\n    fontWeight: 400,\n    margin: '10px 12px !important',\n    fontSize: 18,\n    textTransform: 'uppercase',\n    '&:hover': {\n      cursor: 'default !important',\n      backgroundColor: 'transparent !important',\n    },\n  },\n  drawerPaper: {\n    width: drawerWidth,\n  },\n  content: {\n    height: '100vh',\n    backgroundColor: colors.colorBackground,\n    flexGrow: 1,\n    padding: theme.spacing(3),\n  },\n}));\n\nconst Sidebar: FC<{ children?: React.ReactNode }> = ({ children }) => {\n  const classes = useStyles();\n  const theme = useTheme();\n  const history = useHistory();\n  const [mobileOpen, setMobileOpen] = React.useState(false);\n\n  const handleDrawerToggle = () => {\n    setMobileOpen(!mobileOpen);\n  };\n\n  const sidebarItems = [\n    { label: 'Main page', path: '/main', icon: <HomeIcon /> },\n  ];\n\n  const drawer = (\n    <div className={classes.drawer}>\n      <div className={classes.backgroundFilter}> </div>\n      <ListItem className={classes.menuHeader}>\n        <ListItemIcon>\n          <SportsBaseballIcon />\n        </ListItemIcon>\n        <ListItemText primary={'tennis stats'} />\n      </ListItem>\n      <Divider className={classes.menuDivider} />\n      <List>\n        {sidebarItems.map((item) => (\n          <ListItem\n            button\n            key={item.path}\n            onClick={() => history.push(item.path)}\n          >\n            <ListItemIcon>{item.icon}</ListItemIcon>\n            <ListItemText primary={item.label} />\n          </ListItem>\n        ))}\n      </List>\n    </div>\n  );\n\n  return (\n    <div className={classes.root}>\n      <CssBaseline />\n\n      <nav className={classes.drawer} aria-label=\"mailbox folders\">\n        <Hidden implementation=\"css\">\n          <Drawer\n            variant=\"temporary\"\n            anchor={theme.direction === 'rtl' ? 'right' : 'left'}\n            open={mobileOpen}\n            onClose={handleDrawerToggle}\n            classes={{\n              paper: classes.drawerPaper,\n            }}\n            ModalProps={{\n              keepMounted: true, // Better open performance on mobile.\n            }}\n          >\n            {drawer}\n          </Drawer>\n        </Hidden>\n        <Hidden implementation=\"css\">\n          <Drawer\n            classes={{\n              paper: classes.drawerPaper,\n            }}\n            variant=\"permanent\"\n            open\n          >\n            {drawer}\n          </Drawer>\n        </Hidden>\n      </nav>\n      <main className={classes.content}>{children}</main>\n    </div>\n  );\n};\n\nexport default Sidebar;\n","import React, { FC } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { colors } from '../styles/colors';\n\nconst useStyles = makeStyles({\n  iconWrapper: {\n    padding: 20,\n    marginRight: 15,\n    float: 'left',\n    marginTop: -30,\n    borderRadius: 3,\n  },\n  icon: { '& > svg': { width: 40, height: 40, lineHeight: 40 } },\n});\n\nconst AbsoluteIcon: FC<{ color: string; icon: React.ReactNode }> = ({\n  color,\n  icon,\n}) => {\n  const getBackgroundColor = (color: string) => {\n    return color === 'Orange'\n      ? colors.linearOrange\n      : color === 'Green'\n      ? colors.linearGreen\n      : color === 'Red'\n      ? colors.linearRed\n      : colors.linearBlue;\n  };\n  const getShadowColor = (color: string) => {\n    return color === 'Orange'\n      ? colors.shadowOrange\n      : color === 'Green'\n      ? colors.shadowGreen\n      : color === 'Red'\n      ? colors.shadowRed\n      : colors.shadowBlue;\n  };\n\n  const classes = useStyles();\n  return (\n    <div\n      className={classes.iconWrapper}\n      style={{\n        background: getBackgroundColor(color),\n        boxShadow: getShadowColor(color),\n      }}\n    >\n      <span className={classes.icon}>{icon}</span>\n    </div>\n  );\n};\n\nexport default AbsoluteIcon;\n","import React, { FC } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { colors } from '../styles/colors';\nimport AbsoluteIcon from './AbsoluteIcon';\nimport { Divider } from '@material-ui/core';\n\nconst useStyles = makeStyles({\n  card: {\n    display: 'block',\n    backgroundColor: '#fff',\n    width: 250,\n    borderRadius: 3,\n    boxShadow: colors.blockShadow,\n    padding: 15,\n    marginRight: 30,\n  },\n  infoTitle: {\n    textAlign: 'right',\n    margin: 0,\n    color: colors.colorSecondary,\n  },\n  infoDescription: {\n    textAlign: 'right',\n    margin: '0 0 20px 0',\n    color: colors.colorPrimary,\n    fontSize: '1.825em',\n    fontWeight: 300,\n  },\n  hint: {\n    marginTop: 15,\n    fontSize: 12,\n    color: colors.colorSecondary,\n  },\n  divider: {\n    backgroundColor: colors.colorBackground,\n  },\n});\n\nconst InfoCard: FC<{\n  color: 'Orange' | 'Green' | 'Red' | 'Blue';\n  icon: React.ReactNode;\n  data: { title: string; description: string; hint: string };\n}> = ({ color, icon, data }) => {\n  const classes = useStyles();\n  return (\n    <div className={classes.card}>\n      <AbsoluteIcon color={color} icon={icon} />\n      <p className={classes.infoTitle}>{data.title}</p>\n      <h3 className={classes.infoDescription}>{data.description}</h3>{' '}\n      <Divider className={classes.divider} />\n      <div className={classes.hint}>{data.hint}</div>\n    </div>\n  );\n};\n\nexport default InfoCard;\n","import React from 'react';\nimport Sidebar from './Sidebar';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { colors } from '../styles/colors';\nimport InfoCard from './InfoCard';\nimport VerticalAlignCenterIcon from '@material-ui/icons/VerticalAlignCenter';\nimport AttachMoneyIcon from '@material-ui/icons/AttachMoney';\nimport BusinessCenterIcon from '@material-ui/icons/BusinessCenter';\nimport CheckBoxIcon from '@material-ui/icons/CheckBox';\n\nconst useStyles = makeStyles({\n  title: {\n    fontSize: 18,\n    color: colors.colorPrimary,\n    fontWeight: 300,\n    marginBottom: 50,\n  },\n  cardsWrapper: { display: 'flex' },\n});\n\nfunction App() {\n  const classes = useStyles();\n  return (\n    <Sidebar>\n      <div className={classes.title}>Statistics</div>\n      <div className={classes.cardsWrapper}>\n        <InfoCard\n          data={{\n            title: 'Average coefficient',\n            description: '1.78',\n            hint: 'This year',\n          }}\n          color={'Orange'}\n          icon={<VerticalAlignCenterIcon />}\n        />\n        <InfoCard\n          data={{\n            title: 'Profit',\n            description: '538$',\n            hint: 'This year, flat 5%',\n          }}\n          color={'Green'}\n          icon={<AttachMoneyIcon />}\n        />\n        <InfoCard\n          data={{\n            title: 'Win',\n            description: '67%',\n            hint: 'This year',\n          }}\n          color={'Red'}\n          icon={<CheckBoxIcon />}\n        />\n        <InfoCard\n          data={{\n            title: 'ROI',\n            description: '23%',\n            hint: 'This year',\n          }}\n          color={'Blue'}\n          icon={<BusinessCenterIcon />}\n        />\n      </div>\n    </Sidebar>\n  );\n}\n\nexport default App;\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport App from './components/App';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <CssBaseline />\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// нужно 1 выбор месяца и года 2 в зависимости от выбранного периода\r\n// подробная общая статистика а также краткая статистика профита по разным\r\n// видам ставок. т.е разные стратегии разные форматы (вта и атп) по каждой\r\n// кратко 3 график прибыли по выбранному ранее периоду 4 таблица всех\r\n// загруженных прогнозов 5 статистика по месяцам подробная как впрогнозе\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}